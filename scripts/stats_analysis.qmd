---
title: A very cool analysis
subtitle: A very fancy project
author: <a href="http://researcher.website.com/">Researcher name</a>
date: "`r Sys.Date()`"
toc: true
toc-depth: 2
toc-location: left
number-sections: true
highlight-style: pygments
format:
  html:
    df-print: kable
    code-line-numbers: true    
    code-fold: show
    code-tools: true
    css: qmd.css
editor_options: 
  chunk_output_type: console
---

<!-- this code add line numbers to code blocks -->

<!-- only works when code folding is not used in yaml (code_folding: show) -->

```{=html}
<style>
body
  { counter-reset: source-line 0; }
pre.numberSource code
  { counter-reset: none; }
</style>
```

```{r set root directory, echo = FALSE}

# set working directory 
knitr::opts_knit$set(root.dir =  "..")

```

```{r add link to github repo, echo = FALSE, results='asis'}

# print link to github repo if any
if (file.exists("./.git/config")){
  config <- readLines("./.git/config")
  url <- grep("url",  config, value = TRUE)
  url <- gsub("\\turl = |.git$", "", url)
  cat("\nSource code and data found at [", url, "](", url, ")", sep = "")
  }

```

```{r setup style, echo = FALSE, message = FALSE, warning=FALSE}

# options to customize chunk outputs
knitr::opts_chunk$set(
  tidy.opts = list(width.cutoff = 65),
  tidy = TRUE,
  message = FALSE
 )

```

<!-- skyblue box -->

::: {.alert .alert-info}
# Purpose {.unnumbered .unlisted}

-   Showcase the use of packrat

:::

 

<!-- light brown box -->

::: {.alert .alert-warning}
# Report overview {.unnumbered .unlisted}

- [Example code](#example-code)
- [Takeaways](#takeaways)

:::

 

# Analysis flowchart {.unnumbered .unlisted}

```{mermaid, fig.align = "center"}
flowchart
  A[Read data] --> D(Statistical analysis)
  D --> E(Model summary) 
  D --> C(Graphs)
  

style A fill:#44015466
style C fill:#26828E4D
style D fill:#6DCD594D
style E fill:#3E4A894D

```

# Load packages {.unnumbered .unlisted}

```{r load packages}

# knitr is require for creating html/pdf/word reports
# formatR is used for soft-wrapping code

# install/ load packages
sketchy::load_packages(packages = c("knitr", "formatR", "lme4", "ggplot2"))

```


# Example code

Here's an example code using the `lme4` package to perform a linear regression on the `iris` dataset, followed by plotting the results using `ggplot2` with `geom_point` for mean effect sizes and `geom_errorbar` for the 95% confidence intervals:

## Run statistical model

```{r}
# Fit linear regression model using lme4 package
model <- lmer(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width + (1|Species), data = iris)

# Extract coefficients and standard errors
coefficients <- fixef(model)
se <- sqrt(diag(vcov(model)))

# Calculate 95% confidence intervals
lower_ci <- coefficients - 1.96 * se
upper_ci <- coefficients + 1.96 * se

# Create a data frame for plotting
results <- data.frame(
  Predictor = names(coefficients),
  Coefficient = coefficients,
  Lower_CI = lower_ci,
  Upper_CI = upper_ci
)
```

## Plotting results
```{r}
# Plot results using ggplot2
ggplot(results[results$Predictor != "(Intercept)", ], aes(x = Predictor, y = Coefficient)) +
  geom_point() +
  geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
  labs(title = "Linear Regression Coefficients with 95% Confidence Intervals",
       x = "Predictor",
       y = "Coefficient") + 
  coord_flip() +
  theme_classic() +
  geom_hline(yintercept = 0, lty = 2)


```

This code fits a linear mixed-effects model to the `iris` dataset, where `Sepal.Length` is the dependent variable and `Sepal.Width`, `Petal.Length`, and `Petal.Width` are the independent variables. The model accounts for the grouping effect of `Species` using random intercepts. Then, it extracts the coefficients and standard errors, calculates the 95% confidence intervals, and creates a plot using `ggplot2` to visualize the results with point estimates and error bars representing the confidence intervals.

<!-- '&nbsp;' adds blank space -->

<!-- light green box -->

::: {.alert .alert-success}
# Takeaways {#takeaways .unnumbered .unlisted}

Rmarkdown/quarto is useful!

:::

 

<!-- '---' adds a gray vertical line -->

------------------------------------------------------------------------

 

<!-- add packages used, system details and versions  -->

# Session information {.unnumbered .unlisted}

```{r session info, echo=F}

sessionInfo()

```
